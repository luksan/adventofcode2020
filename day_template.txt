
type LineType = String;
type LineContainer = Vec<String>;

pub fn load_input() -> LineContainer {
    crate::load_input("data/dayN.txt", parse)
}

fn parse<S: AsRef<str>>(s: S) -> LineType {
    let line = s.as_ref();
    line.parse::<LineType>().unwrap()
}

pub fn part1(_lines: &LineContainer) -> usize {
    0
}

pub fn part2(_lines: &LineContainer) -> usize {
    0
}

#[test]
fn real_data() {
    let d = load_input();
    assert_eq!(d.len(), 1);
    assert_eq!(part1(&d), 1);
    // assert_eq!(part2(&d), 1);
}

#[test]
fn test_data() {
    let data = // Example data
"";
    let d: LineContainer = data.lines().map(parse).collect();
    assert_eq!(part1(&d), 1);
    // assert_eq!(part2(&d), 1);
}
